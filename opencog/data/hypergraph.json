{
  "nodes": {
    "languages": [
      ".QL",
      "0815",
      "11l",
      "1C",
      "360-Assembly",
      "4D",
      "4DOS-Batch",
      "4ME",
      "6502-Assembly",
      "6800-Assembly",
      "68000-Assembly",
      "8-1-2",
      "80386-Assembly",
      "8051-Assembly",
      "8080-Assembly",
      "8086-Assembly",
      "8th",
      "A+",
      "AArch64-Assembly",
      "ABAP",
      "ABC",
      "ACL2",
      "AHDL",
      "AIDED-NATURAL-LANGUAGE",
      "ALGOL",
      "ALGOL-60",
      "ALGOL-68",
      "ALGOL-M",
      "ALGOL-W",
      "AMPL",
      "ANSI-BASIC",
      "ANT",
      "ANTLR",
      "APL",
      "ARM-Assembly",
      "ASIC",
      "ASP",
      "ASP.Net",
      "ATS",
      "AWK",
      "Acornsoft-Lisp",
      "Action-",
      "ActionScript",
      "Acurity-Architect",
      "Ada",
      "Adina",
      "Agda",
      "Agda2",
      "Agena",
      "Aikido",
      "Aime",
      "Algae",
      "Alice-ML",
      "Alore",
      "Amazing-Hopper",
      "AmbientTalk",
      "AmigaBASIC",
      "AmigaE",
      "AngelScript",
      "Anyways",
      "Apex",
      "App-Inventor",
      "Apple",
      "AppleScript",
      "Applesoft-BASIC",
      "Application-Master",
      "Apricot",
      "Aquarius-BASIC",
      "Arbre",
      "Arc",
      "Arendelle",
      "Argile",
      "Aria",
      "ArkScript",
      "ArnoldC",
      "Arturo",
      "AsciiDots",
      "AspectC++",
      "AspectJ",
      "Assembly",
      "AssemblyScript",
      "Astro",
      "Asymptote",
      "Atari-BASIC",
      "AutoHotKey-V2",
      "AutoHotkey",
      "AutoIt",
      "AutoLISP",
      "Avail",
      "Axe",
      "Axiom",
      "Axum",
      "Ayrch",
      "B",
      "B4J",
      "B4X",
      "BASIC",
      "BASIC256",
      "BBC-BASIC",
      "BCPL",
      "BLISS",
      "BML",
      "BQN",
      "BaCon",
      "Babel",
      "BabyCobol",
      "Bait",
      "Ballerina",
      "Bas",
      "Basic09",
      "Batari-Basic",
      "Batch-File",
      "Battlestar",
      "Bc",
      "Beads",
      "Beef",
      "Beeswax",
      "Befunge",
      "Beta",
      "Biferno",
      "Binary-Lambda-Calculus",
      "Bird",
      "Blade",
      "Blast",
      "BlitzMax",
      "BlooP",
      "Blue",
      "Blz",
      "Boo",
      "BootBASIC",
      "Bori",
      "Brace",
      "Bracmat",
      "Brainf---",
      "Brat",
      "Brlcad",
      "Bruijn",
      "Burlesque",
      "C",
      "C++",
      "C++-CLI",
      "C-Shell",
      "C-sharp",
      "C0H",
      "C1R",
      "C2",
      "C3",
      "CB80",
      "CBASIC",
      "CFEngine",
      "CHR",
      "CJam",
      "CLIPS",
      "CLU",
      "CMake",
      "COBOL",
      "CafeOBJ",
      "Calcscript",
      "Caml",
      "Casio-BASIC",
      "Cat",
      "Cduce",
      "Cecil",
      "Ceylon",
      "Chapel",
      "Chef",
      "Cherrycake",
      "Chipmunk-Basic",
      "ChucK",
      "Cilk",
      "Cilk++",
      "Cind",
      "Clarion",
      "Clay",
      "Clean",
      "Clio",
      "Clipper",
      "Clipper-XBase++",
      "Clojure",
      "Cobra",
      "Coco",
      "Coconut",
      "CoffeeScript",
      "ColdFusion",
      "Comal",
      "Comefrom0x10",
      "Commodore-BASIC",
      "Common-Lisp",
      "Component-Pascal",
      "Computer-zero-Assembly",
      "ContextFree",
      "Convex",
      "Coq",
      "Corescript",
      "Cowgol",
      "Crack",
      "Craft-Basic",
      "Creative-Basic",
      "Crystal",
      "Cubescript",
      "Curry",
      "Curto",
      "D",
      "DBL",
      "DCL",
      "DDNC",
      "DIBOL-11",
      "DIV-Games-Studio",
      "DM",
      "DMS",
      "DUP",
      "DWScript",
      "Dafny",
      "Dao",
      "Dart",
      "DataWeave",
      "Datalog",
      "Dc",
      "Delphi",
      "Deluge",
      "DeviousYarn",
      "Diego",
      "Diesel",
      "Dodo0",
      "Draco",
      "Dragon",
      "DreamBerd",
      "Dt",
      "DuckDB",
      "Dyalect",
      "Dylan",
      "Dylan.NET",
      "E",
      "EC",
      "ECL",
      "EDSAC-order-code",
      "EGL",
      "ELLA",
      "EMal",
      "ERRE",
      "ESQL",
      "EasyLang",
      "EchoLisp",
      "Ecstasy",
      "Ed",
      "Eero",
      "Efene",
      "Egel",
      "Egison",
      "EhBASIC",
      "Eiffel",
      "Ela",
      "Elan",
      "ElastiC",
      "Elena",
      "Elisa",
      "Elixir",
      "Elm",
      "Emacs-Lisp",
      "Emojicode",
      "Enguage",
      "Epigram",
      "Epoxy",
      "Erlang",
      "Es",
      "Euler",
      "Euphoria",
      "Evaldraw",
      "Excel",
      "Explore",
      "Extended-BrainF---",
      "Extended-Color-BASIC",
      "Ezhil",
      "F",
      "F-Sharp",
      "FALSE",
      "FAUST",
      "FBSL",
      "FLORA-2",
      "FOCAL",
      "FP",
      "FPI",
      "FRISC-Assembly",
      "FTCBASIC",
      "FUZE-BASIC",
      "Factor",
      "Falcon",
      "Fan",
      "Fancy",
      "Fantom",
      "Fe",
      "FeatureC++",
      "Felix",
      "Fennel",
      "Ferite",
      "Fermat",
      "Fexl",
      "Fhidwfe",
      "Fish",
      "Florid",
      "FormulaOne",
      "Forth",
      "Fortran",
      "Fortress",
      "Free-Pascal-Lazarus",
      "FreeBASIC",
      "FreeMat",
      "Frege",
      "Friendly-interactive-shell",
      "Frink",
      "FunL",
      "FuncSug",
      "Furor",
      "FurryScript",
      "Futhark",
      "FutureBasic",
      "G-fu",
      "GAP",
      "GB-BASIC",
      "GDScript",
      "GEORGE",
      "GFA-Basic",
      "GLBasic",
      "GLSL",
      "GML",
      "GUISS",
      "GW-BASIC",
      "Gambas",
      "Gastona",
      "Gecho",
      "Gema",
      "Genie",
      "Gentee",
      "Genyris",
      "Gerbil",
      "Glagol",
      "Gleam",
      "Glee",
      "Global-Script",
      "GlovePIE",
      "Gnuplot",
      "Go",
      "Go-",
      "Goaldi",
      "Goboscript",
      "Golfscript",
      "Golo",
      "Goo",
      "Gosu",
      "Grain",
      "Gri",
      "Groovy",
      "Guile",
      "Guish",
      "HLA",
      "HPPPL",
      "HQ9+",
      "Hack",
      "Halon",
      "Harbour",
      "Hare",
      "Haskell",
      "Haxe",
      "Heron",
      "Hexiscript",
      "HicEst",
      "HolyC",
      "Hoon",
      "Hope",
      "Hopper",
      "Huginn",
      "Hy",
      "HyperTalk",
      "I",
      "IDL",
      "IPL-Loader-Config",
      "IS-BASIC",
      "IWBASIC",
      "Icon",
      "Idris",
      "Imp77",
      "Inform-6",
      "Inform-7",
      "Informix-4GL",
      "Inko",
      "Insitux",
      "Integer-BASIC",
      "Intercal",
      "Io",
      "Ioke",
      "Iptscrae",
      "Isabelle",
      "J",
      "JAMES-II-Rule-based-Cellular-Automata",
      "JCL",
      "JOVIAL",
      "JSE",
      "JScript.NET",
      "Jabaco",
      "Jack",
      "Jacquard-Loom",
      "Jakt",
      "Janet",
      "Java",
      "JavaFX-Script",
      "JavaScript",
      "Jinja",
      "JoCaml",
      "Joy",
      "Jq",
      "Jsish",
      "JudoScript",
      "Julia",
      "K",
      "KAP",
      "KL1",
      "KQL",
      "Kabap",
      "Kamailio-Script",
      "Kantalo",
      "Kaya",
      "Keg",
      "KeyList-Databasing",
      "Kite",
      "Kitten",
      "Klingphix",
      "Klong",
      "Koka",
      "Komodo",
      "KonsolScript",
      "Kotlin",
      "Ksh",
      "L++",
      "L.in.oleum",
      "LAST",
      "LC2200-Assembly",
      "LC3-Assembly",
      "LDPL",
      "LFE",
      "LIL",
      "LLP",
      "LLVM",
      "LOLCODE",
      "LSE",
      "LSE64",
      "LSL",
      "LSTS",
      "LaTeX",
      "LabVIEW",
      "Labyrinth",
      "Lambda-Prolog",
      "Lambdatalk",
      "Lang",
      "Lang5",
      "Langur",
      "Lasso",
      "Latitude",
      "Lean",
      "Leon",
      "Lhogho",
      "Liberty-BASIC",
      "LibreOffice-Basic",
      "Lily",
      "Lilypond",
      "Limbo",
      "Lingo",
      "Lisaac",
      "Lisp",
      "Little",
      "Little-Man-Computer",
      "LiveCode",
      "LiveScript",
      "Lobster",
      "Locomotive-Basic",
      "Loglan82",
      "Logo",
      "Logtalk",
      "Lolli",
      "Lotus-123-Macro-Scripting",
      "LotusScript",
      "Lout",
      "Lua",
      "Lucid",
      "Luck",
      "Luna",
      "Lush",
      "Lychen",
      "Lygon",
      "M2000-Interpreter",
      "M4",
      "M680x0",
      "MACRO-11",
      "MAD",
      "MANOOL",
      "MAPPER",
      "MATLAB",
      "MAXScript",
      "MBS",
      "MDL",
      "ME10-macro",
      "MEL",
      "MGS",
      "MINIL",
      "MIPS-Assembly",
      "MIRC-Scripting-Language",
      "ML",
      "ML-I",
      "MLite",
      "MMIX",
      "MOO",
      "MPIF90",
      "MS-SQL",
      "MSSQL",
      "MSX-Basic",
      "MUF",
      "MUMPS",
      "Macsyma",
      "Make",
      "Malbolge",
      "Maple",
      "MariaDB",
      "Mastermind",
      "MathCortex",
      "Mathcad",
      "Mathematica",
      "Mathprog",
      "Maude",
      "Maxima",
      "MelonBasic",
      "Mercury",
      "Metafont",
      "Metapost",
      "Mia",
      "Microsoft-Small-Basic",
      "Min",
      "MiniScript",
      "MiniZinc",
      "Minimal-BASIC",
      "Mirah",
      "Miranda",
      "Mirelle",
      "Mn",
      "Modula-2",
      "Modula-3",
      "Mojo",
      "Mond",
      "Monicelli",
      "Monkey",
      "Monte",
      "MontiLang",
      "MoonScript",
      "Morfa",
      "Mosaic",
      "Motoko",
      "MySQL",
      "Myrddin",
      "MyrtleScript",
      "Mython",
      "Mythryl",
      "N-t-roff",
      "NASL",
      "NATURAL",
      "NESL",
      "NGS",
      "NLP++",
      "NOWUT",
      "NQP",
      "NS-HUBASIC",
      "NSIS",
      "Nanoquery",
      "Nascom-BASIC",
      "Neat",
      "Neko",
      "Nemerle",
      "NetLogo",
      "NetRexx",
      "Never",
      "NewLISP",
      "NewtonScript",
      "Nial",
      "Nice",
      "Nickle",
      "Night",
      "Nim",
      "Nit",
      "Niue",
      "Nix",
      "Nom",
      "Nu",
      "Nutt",
      "Nyquist",
      "OASYS",
      "OASYS-Assembler",
      "OCaml",
      "OOC",
      "OOCalc",
      "OPL",
      "Oberon",
      "Oberon-07",
      "Objeck",
      "Object-Pascal",
      "Object-Pascal-Implementations",
      "ObjectIcon",
      "Objective-C",
      "Occam",
      "Octave",
      "Odin",
      "Oforth",
      "Ol",
      "Omega",
      "OmniMark",
      "Onyx",
      "Onyx-(wasm)",
      "OoRexx",
      "Opa",
      "OpenC++",
      "OpenEdge-Progress",
      "OpenLisp",
      "Openscad",
      "Order",
      "Owl-Lisp",
      "OxygenBasic",
      "Oxygene",
      "Oz",
      "PARI-GP",
      "PASM",
      "PDP-11-Assembly",
      "PHL",
      "PHP",
      "PILOT",
      "PIR",
      "PL-0",
      "PL-B",
      "PL-I",
      "PL-I-80",
      "PL-M",
      "PL-SQL",
      "PL-pgSQL",
      "PLUS",
      "PLZ-SYS",
      "POV-Ray",
      "PPL",
      "PROMAL",
      "PSQL",
      "Palo-Alto-Tiny-BASIC",
      "Panda",
      "Panoramic",
      "ParaCL",
      "Pare",
      "Pascal",
      "Pascal-P",
      "PascalABC.NET",
      "Pebble",
      "Peloton",
      "Pentium-Assembly",
      "PeopleCode",
      "PepsiScript",
      "Peri",
      "Perl",
      "Perl-6",
      "Perl5i",
      "Peylang",
      "Phix",
      "Phixmonti",
      "Picat",
      "Pico-8",
      "PicoLisp",
      "Pict",
      "Piet",
      "Pike",
      "Pixilang",
      "Plain-English",
      "PlainTeX",
      "Plan",
      "Pluto",
      "Pointless",
      "Polyglot",
      "Pony",
      "Pop11",
      "Portugol",
      "PostScript",
      "Potion",
      "PowerBASIC",
      "PowerPC-Assembly",
      "PowerShell",
      "Powerbuilder",
      "ProDOS",
      "Processing",
      "Processing-Python-mode",
      "Processing.R",
      "Prog8",
      "ProgressBASIC",
      "Prolog",
      "Pure",
      "Pure-Data",
      "PureBasic",
      "Purity",
      "Pyret",
      "Python",
      "Q",
      "QB64",
      "QBasic",
      "QL-SuperBASIC",
      "Qi",
      "Qore",
      "Quackery",
      "QuakeC",
      "QuickBASIC",
      "Quill",
      "Quite-BASIC",
      "Quorum",
      "R",
      "RASEL",
      "RATFOR",
      "REALbasic",
      "REBOL",
      "REXX",
      "RISC-V-Assembly",
      "RLSL",
      "RLaB",
      "RPG",
      "RPGIV",
      "RPL",
      "RPL-2",
      "RTL-2",
      "RTSL",
      "Ra",
      "Racket",
      "Raku",
      "RapidQ",
      "Rapira",
      "Rascal",
      "Raven",
      "ReScript",
      "Reason",
      "Red",
      "Reduce",
      "Refal",
      "Relation",
      "Retro",
      "Revolution",
      "Rhombus",
      "Rhope",
      "Rhovas",
      "Ring",
      "Robotic",
      "Roc",
      "Rockstar",
      "Ruby",
      "Rubylog",
      "Run-BASIC",
      "Rust",
      "S++",
      "S-BASIC",
      "S-lang",
      "SAS",
      "SASL",
      "SETL",
      "SIMPOL",
      "SMEQL",
      "SNOBOL4",
      "SNUSP",
      "SPAD",
      "SPARC-Assembly",
      "SPARK",
      "SPL",
      "SPSS",
      "SQL",
      "SQL-PL",
      "SSEM",
      "SWI-Prolog",
      "Sage",
      "Salmon",
      "Sass-SCSS",
      "Sather",
      "Scala",
      "Scheme",
      "Scilab",
      "Scratch",
      "ScratchScript",
      "Script-Basic",
      "Script3D",
      "ScriptBasic",
      "Sed",
      "Seed7",
      "Self",
      "SenseTalk",
      "SequenceL",
      "Set-lang",
      "Setl4",
      "Shale",
      "SheerPower-4GL",
      "Shen",
      "Shiny",
      "Sidef",
      "SimpleCode",
      "SimpleLang",
      "Simula",
      "Sinclair-ZX81-BASIC",
      "Sing",
      "Sisal",
      "Skew",
      "SkookumScript",
      "Slate",
      "Slope",
      "Smalltalk",
      "Smart-BASIC",
      "SmileBASIC",
      "Snobol",
      "Soar",
      "Soda",
      "SoneKing-Assembly",
      "SparForte",
      "Sparkling",
      "Spin",
      "Squirrel",
      "Standard-ML",
      "Star",
      "Stata",
      "Stax",
      "StreamIt",
      "Stringle",
      "Suneido",
      "SuperCollider",
      "SuperTalk",
      "Superbase-BASIC",
      "Supernova",
      "Swahili",
      "Swift",
      "Symsyn",
      "SystemVerilog",
      "TAL",
      "TAV",
      "TI-57",
      "TI-83-BASIC",
      "TI-83-Hex-Assembly",
      "TI-89-BASIC",
      "TI-BASIC",
      "TI-SR-56",
      "TIS-100",
      "TIScript",
      "TMG",
      "TPP",
      "TRS-80-BASIC",
      "TSE-SAL",
      "TUSCRIPT",
      "TXR",
      "TailDot",
      "Tailspin",
      "Tbas",
      "Tcl",
      "TeLa",
      "TechBASIC",
      "Teco",
      "Tern",
      "Terra",
      "Terraform",
      "TestML",
      "Thistle",
      "Thyrd",
      "Tiny-BASIC",
      "Tiny-Craft-Basic",
      "Tobbisk",
      "ToffeeScript",
      "Toka",
      "TorqueScript",
      "Tosh",
      "TransFORTH",
      "Transact-SQL",
      "Transd",
      "Trith",
      "True-BASIC",
      "Turbo-Basic-XL",
      "Turing",
      "TutorialD",
      "Twelf",
      "TypeScript",
      "Typed-Racket",
      "UC++",
      "UNIX-Shell",
      "UScript",
      "UTFool",
      "Uiua",
      "Ultimate++",
      "Unicon",
      "Uniface",
      "Unison",
      "UnixPipes",
      "Unlambda",
      "Ursa",
      "Ursala",
      "Ursalang",
      "UserRPL",
      "Uxntal",
      "V",
      "V-(Vlang)",
      "VAX-Assembly",
      "VB6",
      "VBA",
      "VBScript",
      "VHDL",
      "VRML",
      "VTL-2",
      "Vala",
      "Vale",
      "Vedit-macro-language",
      "Verbexx",
      "Verilog",
      "Vim-Script",
      "Visual-Basic",
      "Visual-Basic-.NET",
      "Visual-FoxPro",
      "Visual-Objects",
      "Visual-Prolog",
      "Viua-VM-assembly",
      "Vorpal",
      "Vox",
      "Vyxal",
      "WDTE",
      "WML",
      "Waduzitdo",
      "Wart",
      "WebAssembly",
      "Wee-Basic",
      "Whenever",
      "Whitespace",
      "Wisp",
      "Wollok",
      "Woma",
      "Wortel",
      "Wrapl",
      "Wren",
      "X-script",
      "X10",
      "X86-64-Assembly",
      "X86-Assembly",
      "XBS",
      "XBase",
      "XBasic",
      "XEec",
      "XL",
      "XLISP",
      "XPL0",
      "XPath-2.0",
      "XProc",
      "XProfan",
      "XQuery",
      "XS",
      "XSLT",
      "XSLT-1.0",
      "XSLT-2.0",
      "XTalk",
      "XUL",
      "Xanadu",
      "Xojo",
      "YAMLScript",
      "Ya",
      "Yabasic",
      "Yacas",
      "Yorick",
      "Z80-Assembly",
      "ZED",
      "ZPL",
      "ZX-Spectrum-Basic",
      "Zig",
      "Zkl",
      "Zoea",
      "Zoea-Visual",
      "Zonnon",
      "Zoomscript"
    ],
    "subcategories": [
      "cognitive_architecture/concurrent_patterns",
      "cognitive_architecture/message_passing",
      "cognitive_architecture/parallelism",
      "cognitive_architecture/synchronization",
      "knowledge_representation/associative_structures",
      "knowledge_representation/graph_structures",
      "knowledge_representation/serialization",
      "knowledge_representation/tree_structures",
      "machine_learning/neural_networks",
      "machine_learning/optimization",
      "machine_learning/statistical_learning",
      "machine_learning/statistical_measures",
      "meta_learning/code_generation",
      "meta_learning/evaluation_functions",
      "meta_learning/introspection",
      "meta_learning/runtime_evaluation",
      "meta_learning/self_reference",
      "natural_language/language_analysis",
      "natural_language/parsing",
      "natural_language/phonetic_matching",
      "natural_language/text_generation",
      "natural_language/text_processing",
      "natural_language/tokenization",
      "pattern_recognition/lexical_patterns",
      "pattern_recognition/recognition_tasks",
      "pattern_recognition/search_algorithms",
      "pattern_recognition/string_pattern_matching",
      "perception_motor/bitmap_operations",
      "perception_motor/image_processing",
      "perception_motor/rendering",
      "perception_motor/signal_processing",
      "perception_motor/time_processing",
      "planning_problem_solving/game_playing",
      "planning_problem_solving/optimization_problems",
      "planning_problem_solving/path_planning",
      "planning_problem_solving/puzzle_solving",
      "planning_problem_solving/search_strategies",
      "symbolic_reasoning/constraint_solving",
      "symbolic_reasoning/formal_computation",
      "symbolic_reasoning/logic_fundamentals",
      "symbolic_reasoning/theorem_proving",
      "uncertainty_reasoning/distributions",
      "uncertainty_reasoning/monte_carlo",
      "uncertainty_reasoning/probability_basics",
      "uncertainty_reasoning/statistical_tests"
    ],
    "paradigms": [
      "imperative",
      "object_oriented",
      "functional",
      "logic",
      "concurrent",
      "scripting",
      "system",
      "scientific",
      "multi_paradigm"
    ]
  },
  "edges": {
    "language_to_subcategory": [
      {
        "language": "11l",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "11l",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "11l",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "11l",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "11l",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "11l",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "11l",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "11l",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "11l",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "11l",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "11l",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "11l",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "11l",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "11l",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "11l",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "11l",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "11l",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "11l",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "11l",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 6,
        "tasks": [
          "Random-Latin-squares",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "11l",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "11l",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "11l",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "11l",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "11l",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "11l",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "11l",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "11l",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "11l",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "11l",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "11l",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "11l",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "11l",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "11l",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Compile-time-calculation",
          "Pi"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "360-Assembly",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "6502-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Reflection-Get-source"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "68000-Assembly",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "8051-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "8051-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Truth-table"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "8080-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "8086-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "8th",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "8th",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "8th",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "8th",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Atomic-updates"
        ]
      },
      {
        "language": "8th",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-Shunting-yard-algorithm"
        ]
      },
      {
        "language": "8th",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "8th",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Sudoku"
        ]
      },
      {
        "language": "8th",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "8th",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "8th",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "15-puzzle-solver",
          "Pi"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "Tree-traversal",
          "AVL-tree",
          "K-d-tree"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-DOM-serialization",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "AArch64-Assembly",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "ABAP",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ABC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ABC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "ACL2",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "ALGOL-60",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "ALGOL-60",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ALGOL-60",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Synchronous-concurrency",
          "Currency"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 7,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "Object-serialization",
          "XML-Output"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "ALGOL-68",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ALGOL-M",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ALGOL-W",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ANSI-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ANT",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "ANT",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ANT",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "ANTLR",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "ANTLR",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "APL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "APL",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "APL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "APL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "APL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "APL",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "APL",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "APL",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "APL",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "APL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "APL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "APL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "APL",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "APL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "APL",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "N-queens-problem"
        ]
      },
      {
        "language": "APL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "APL",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "APL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "APL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "APL",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "APL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "APL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "APL",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "APL",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-game",
          "15-puzzle-solver",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "Tree-traversal",
          "AVL-tree",
          "K-d-tree"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-DOM-serialization",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Solve-the-no-connection-puzzle"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "ARM-Assembly",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "AVL-tree"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Dijkstras-algorithm",
          "Topological-sort"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Active-object"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "ATS",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Compiler-lexical-analyzer",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "AWK",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Acornsoft-Lisp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Acornsoft-Lisp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Acornsoft-Lisp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Median-filter",
          "Filter"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-Latin-squares"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Action-",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ActionScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 7,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Ada",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Adina",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Agda",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Agda",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "AVL-tree"
        ]
      },
      {
        "language": "Agda",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Agena",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Agena",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Agena",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Agena",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Agena",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Aikido",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-angle"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Aime",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-2"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Amazing-Hopper",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "AmigaE",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "AmigaE",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "AmigaE",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Apex",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Apex",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Apex",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Apex",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Apple",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Apple",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "AppleScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Statistics-Basic"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Applesoft-BASIC",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "Arc",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Arc",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Arc",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Argile",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Argile",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Argile",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Logical-operations",
          "Boolean-values"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "ArkScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "JSON"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Arturo",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Astro",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Astro",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Astro",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Asymptote",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Asymptote",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Asymptote",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Asymptote",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Atari-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Atari-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Atari-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Atomic-updates"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "XML-Output"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "AutoHotkey",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "AutoIt",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Avail",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Avail",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Avail",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Axe",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Axiom",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Truth-table"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "BASIC256",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-1"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "BBC-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "BCPL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "BML",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "BQN",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Parallel-brute-force",
          "Concurrent-computing"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "BaCon",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Babel",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Babel",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Babel",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Babel",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ballerina",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Word-frequency",
          "Text-processing-1"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Batch-File",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Bc",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Beads",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Beeswax",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Beeswax",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Befunge",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Boo",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "BootBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-a-Holy-Knights-tour",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Bracmat",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Brainf---",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Brainf---",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Brainf---",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Brat",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Brlcad",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Brlcad",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Bruijn",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Burlesque",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Burlesque",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Burlesque",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Burlesque",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Burlesque",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "C",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "C",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "C",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "C",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "C",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "C",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "C",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "C",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "C",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "C",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "C",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "C",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "C",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "C",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "C",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "C",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "C",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "C",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "C",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "C",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "C",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "C",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "C",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "C",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "C",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "C",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "C",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "C",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "C",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "C",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "C",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "C",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "C",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "C",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "C",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "C",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "C",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "C++",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "C++",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "C++",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "C++",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "C++",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "C++",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "C++",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "C++",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "C++",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "C++",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "C++",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "C++",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "C++",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "C++",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "C++",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "C++",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "C++",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "C++",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "C++",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "C++",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "C++",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C++",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C++",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "C++",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "C++",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "C++",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "C++",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "C++",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "C++",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "C++",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "C++",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "C++",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "C++",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "C++",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "C++",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "C++",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "C++",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "C++",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "C-Shell",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "C-Shell",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "C-sharp",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "C1R",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "C3",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "C3",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "CFEngine",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "CLIPS",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "CLU",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "CMake",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "CMake",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "COBOL",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "CafeOBJ",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Casio-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Parsing-Shunting-yard-algorithm"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ceylon",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Solve-the-no-connection-puzzle"
        ]
      },
      {
        "language": "Chapel",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method",
          "Random-numbers"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Vector",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Chipmunk-Basic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "ChucK",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Cind",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Clay",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Clean",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Clean",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Clean",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Clipper",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Clipper",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Clipper-XBase++",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "Clipper-XBase++",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Clojure",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Coco",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "CoffeeScript",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "ColdFusion",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "ColdFusion",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "ColdFusion",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ColdFusion",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Comal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Pi"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Commodore-BASIC",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Word-frequency"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Common-Lisp",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Palindrome-detection",
          "Anagrams"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Component-Pascal",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Computer-zero-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "ContextFree",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Coq",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Coq",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Truth-table"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Cowgol",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Craft-Basic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Craft-Basic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Craft-Basic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Craft-Basic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Dijkstras-algorithm",
          "Topological-sort"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Active-object",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "Monte-Carlo-methods",
          "K-means++-clustering"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Crystal",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Curry",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Zebra-puzzle",
          "N-queens-problem",
          "Sudoku"
        ]
      },
      {
        "language": "D",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "D",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "D",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "D",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "D",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "D",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "D",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 7,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "D",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "D",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "D",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "D",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "D",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization"
        ]
      },
      {
        "language": "D",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "D",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "D",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "D",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "D",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "D",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "D",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "D",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "D",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "D",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "D",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 6,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "D",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "D",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "D",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "D",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "D",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "D",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "D",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "D",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "D",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "D",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "D",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "D",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "D",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "D",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "D",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "DBL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "DBL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "DCL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "DCL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "DWScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Dao",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Dao",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-solver",
          "Towers-of-Hanoi",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-PCG32"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Boyer-Moore-string-search"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "K-d-tree"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Statistics-Basic"
        ]
      },
      {
        "language": "Dart",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Dc",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 7,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Filter"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Currency"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Pi"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Delphi",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Diego",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Dodo0",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Draco",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Dragon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Dt",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-2"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Averages-Mean-angle",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Sudoku"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Reflection-List-properties",
          "Introspection",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "DuckDB",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Dyalect",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Dylan",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Dylan",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "E",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "E",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "E",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "E",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Mutex",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "E",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "E",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "E",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "E",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "E",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "E",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-DOM-serialization",
          "Object-serialization"
        ]
      },
      {
        "language": "E",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "E",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "E",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "E",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "E",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "E",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "E",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "E",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "E",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "E",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "E",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "E",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "E",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "E",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "E",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "E",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "EC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ECL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "EDSAC-order-code",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "EGL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "EGL",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "EGL",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "EGL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "EMal",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ERRE",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "EasyLang",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Active-object",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "JSON",
          "Object-serialization"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "EchoLisp",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Reflection-List-properties",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Ecstasy",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Ed",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ed",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "Ed",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ed",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Ed",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Efene",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Efene",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Egel",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Egel",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Egel",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Egison",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance-Alignment"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance-Alignment"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Eiffel",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Palindrome-detection",
          "Anagrams"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ela",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Reflection-List-properties",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Elena",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Elisa",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Elixir",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Elm",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Elm",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "Elm",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Elm",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Logical-operations",
          "Boolean-values"
        ]
      },
      {
        "language": "Elm",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Emacs-Lisp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Erlang",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Flood-fill"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "Monte-Carlo-methods",
          "K-means++-clustering"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Euler",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Atomic-updates",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Write-a-PPM-file",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Euphoria",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "Evaldraw",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Evaldraw",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Logical-operations",
          "Boolean-values"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Excel",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Extended-Color-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Extended-Color-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Ezhil",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ezhil",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 7,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "F-Sharp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "FALSE",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "FALSE",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "FALSE",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "FALSE",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap",
          "Bitmap-Histogram",
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Flood-fill",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Read-a-PPM-file",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Palindrome-detection",
          "Anagrams"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Active-object"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "FBSL",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "FOCAL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "FOCAL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Active-object",
          "Currency"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "N-queens-problem"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Factor",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Falcon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Fantom",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Fe",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Fennel",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Fennel",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Fennel",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Fermat",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Fish",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "FormulaOne",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 7,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-1"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 5,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "XML-Output"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Forth",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "JSON"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Fortran",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Parallel-calculations"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Boyer-Moore-string-search"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Free-Pascal-Lazarus",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "FreeBASIC",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Frege",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-solving"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Parallel-brute-force"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Host-introspection",
          "Introspection",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Frink",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "FunL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Furor",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Furor",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Futhark",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap",
          "Bitmap-Midpoint-circle-algorithm"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Mutex",
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "JSON"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "FutureBasic",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "GAP",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "GDScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "GDScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "GFA-Basic",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "GFA-Basic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "GLSL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "GML",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "GML",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "GML",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "GML",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "GUISS",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "GUISS",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Vector",
          "Statistics-Basic"
        ]
      },
      {
        "language": "GW-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Gambas",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Gecho",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Gema",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Genie",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Genie",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Genie",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Genie",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Genie",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Genyris",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Genyris",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Gnuplot",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Gnuplot",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Go",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Go",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Go",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Go",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Go",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Go",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Go",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Go",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Go",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Go",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Go",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Go",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Go",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Go",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Go",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Go",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Go",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Go",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Go",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Go",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Go",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Go",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Go",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Go",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Go",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Go",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Go",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Go",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Go",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Go",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Go",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Go",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Go",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Go",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Go",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Go",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Go",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Go",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Go",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Sudoku"
        ]
      },
      {
        "language": "Golfscript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Gosu",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Active-object",
          "Atomic-updates"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Groovy",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Guile",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "HQ9+",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Halon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Halon",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Harbour",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Harbour",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Harbour",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Harbour",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Harbour",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Hare",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Hare",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 4,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Haskell",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Haxe",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Haxe",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Haxe",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Haxe",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Heron",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Hexiscript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Hexiscript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Flood-fill"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "HicEst",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "HolyC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "HolyC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "HolyC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "HolyC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Hoon",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Hoon",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Hoon",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Hoon",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Huginn",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Huginn",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Huginn",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Huginn",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Huginn",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "K-means++-clustering"
        ]
      },
      {
        "language": "Hy",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Hy",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Statistics-Basic"
        ]
      },
      {
        "language": "Hy",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "I",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "I",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "IDL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Write-float-arrays-to-a-text-file"
        ]
      },
      {
        "language": "IDL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-angle"
        ]
      },
      {
        "language": "IDL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "IDL",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "IDL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "IS-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Icon",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Idris",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Idris",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "Idris",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Idris",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Imp77",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Inform-7",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Inform-7",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Inform-7",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Inform-7",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Inform-7",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Insitux",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Insitux",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Insitux",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Insitux",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Insitux",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Integer-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Integer-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Integer-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Io",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Io",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Io",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Io",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Io",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Io",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Io",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Io",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Io",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Ioke",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ioke",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ioke",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Ioke",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Isabelle",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "J",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "J",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "J",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "J",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "J",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "J",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "J",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "J",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "J",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "J",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "J",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "J",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "J",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 4,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "J",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "J",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "J",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "J",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "J",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "J",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "J",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "J",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "J",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "J",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "J",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "J",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 5,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "J",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "J",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "J",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "J",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection"
        ]
      },
      {
        "language": "J",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "J",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "J",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "J",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "J",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "J",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "J",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "J",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "J",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "JAMES-II-Rule-based-Cellular-Automata",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Jakt",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Jakt",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Jakt",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Java",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Java",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Java",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Java",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Java",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Java",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Java",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Java",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Java",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Java",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Java",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Java",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Java",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Java",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Java",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Java",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Java",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Java",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Java",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Java",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Java",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Java",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Java",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Java",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Java",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Java",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Java",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Java",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Java",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Java",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Java",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Java",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Java",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Java",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Java",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Java",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Java",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Java",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "JavaFX-Script",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 4,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Active-object",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "JavaScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "JoCaml",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Write-float-arrays-to-a-text-file"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Joy",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Jq",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Runtime-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Jsish",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Statistics-Basic"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Julia",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "K",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "K",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "K",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "K",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "K",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "K",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "K",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "K",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "K",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "K",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "K",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "K",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "K",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "K",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "K",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "K",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "KAP",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Klingphix",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Klingphix",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Klingphix",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Klong",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "Klong",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Statistics-Basic"
        ]
      },
      {
        "language": "Klong",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Koka",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Koka",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Komodo",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "KonsolScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "KonsolScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 6,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Kotlin",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Ksh",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Ksh",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "Ksh",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Ksh",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Ksh",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "LDPL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "LDPL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "LDPL",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "LFE",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "LIL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "LIL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "LIL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "LLVM",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "LOLCODE",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "LOLCODE",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "LOLCODE",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "LOLCODE",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "LSE64",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "LSL",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "LSL",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "LSL",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "LSL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "LaTeX",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Lambdatalk",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Lang",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Lang5",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Lang5",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Lang5",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Lang5",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Lang5",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Langur",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Langur",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Langur",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Langur",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Langur",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Atomic-updates"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Lasso",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Latitude",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Flood-fill"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Liberty-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Limbo",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Limbo",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Limbo",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Active-object"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Flood-fill",
          "Bitmap"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Reflection-List-properties",
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Lingo",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Lisaac",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Lisaac",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Lisp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Little",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Little",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Write-a-PPM-file",
          "Bitmap"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "LiveCode",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Lobster",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Lobster",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Lobster",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Lobster",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Knights-tour"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Locomotive-Basic",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "String-matching"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Logo",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "AVL-tree"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Mutex",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Logtalk",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Currency"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 5,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Lua",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Lucid",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Luck",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Mutex",
          "Currency"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-2"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "M2000-Interpreter",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "M4",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "M4",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions"
        ]
      },
      {
        "language": "M4",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "M4",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "M4",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "M4",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "M4",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "M4",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "M4",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "M4",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "M4",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "M4",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "MACRO-11",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "MACRO-11",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "MACRO-11",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MACRO-11",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "MAD",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MAD",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "MANOOL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-convolution"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "MATLAB",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "MAXScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "MINIL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "MINIL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "MIPS-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "MIPS-Assembly",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "MIPS-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "MIPS-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "MIPS-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "MIRC-Scripting-Language",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "MIRC-Scripting-Language",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "ML-I",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MLite",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "MLite",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "MLite",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MMIX",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "MMIX",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "MSX-Basic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "MSX-Basic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "MSX-Basic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "MSX-Basic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "MUMPS",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Make",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Make",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Maple",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Mathcad",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Active-object",
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 5,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Mathematica",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Mathprog",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Mathprog",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Maxima",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Mercury",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Metafont",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Metafont",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Metafont",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Microsoft-Small-Basic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Microsoft-Small-Basic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Min",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Min",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Min",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Min",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Min",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Min",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Min",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Min",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Min",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Flood-fill",
          "Bitmap"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Averages-Mean-angle",
          "Cumulative-standard-deviation",
          "Vector",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "MiniScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "MiniZinc",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded",
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "MiniZinc",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Minimal-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Minimal-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Minimal-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Minimal-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Mirah",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Mirah",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Mirah",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Miranda",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Miranda",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Miranda",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Parallel-brute-force"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Modula-2",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Modula-3",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Mojo",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Monte",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Monte",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Monte",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "MoonScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "N-t-roff",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "N-t-roff",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "NGS",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "NS-HUBASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "NS-HUBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "NSIS",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Reflection-List-properties",
          "Reflection-Get-source",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Vector"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Nanoquery",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Nascom-BASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Nascom-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Nascom-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "Object-serialization"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Logical-operations",
          "Boolean-values"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Neko",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Nemerle",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Host-introspection",
          "Introspection"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "NetRexx",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Never",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-1"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "NewLISP",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Nial",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Nial",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Nial",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Nim",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Nit",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Niue",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Nu",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Filter"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Currency"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "OCaml",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "OOC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "OOC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "OPL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Oberon",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Anagrams"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Objeck",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Object-Pascal",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "Object-Pascal",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "ObjectIcon",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "ObjectIcon",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Host-introspection",
          "Reflection-List-properties",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "JSON",
          "Object-serialization"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Objective-C",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Histogram",
          "Bitmap"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-convolution"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Octave",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Odin",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "Odin",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Odin",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Compile-time-calculation",
          "Pi"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Checkpoint-synchronization",
          "Mutex",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Oforth",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "JSON",
          "Object-serialization"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Ol",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "OmniMark",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Active-object",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Averages-Mean-angle",
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Reflection-List-properties"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "OoRexx",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "OpenEdge-Progress",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "OpenEdge-Progress",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "OpenEdge-Progress",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Openscad",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Order",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Active-object"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Parallel-calculations"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "OxygenBasic",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Oxygene",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Active-object",
          "Atomic-updates",
          "Mutex",
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Write-a-PPM-file",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Oz",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams-Deranged-anagrams"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PARI-GP",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PDP-11-Assembly",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "PDP-11-Assembly",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PHL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "PHL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Histogram",
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Introspection",
          "Reflection-List-methods",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "PHP",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Anagrams"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PL-I",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PL-M",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "PL-SQL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "PL-SQL",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "PL-SQL",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "POV-Ray",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "POV-Ray",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "POV-Ray",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "POV-Ray",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Palo-Alto-Tiny-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Flood-fill",
          "Bitmap"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Vector-products"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-DOM-serialization",
          "JSON"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Pascal",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Pascal-P",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Pascal-P",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "PascalABC.NET",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Peloton",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Peri",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Peri",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Perl",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Phix",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Phixmonti",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Picat",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "PicoLisp",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-DOM-serialization",
          "JSON",
          "XML-Input"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Pike",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Plain-English",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Plain-English",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Plain-English",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Plain-English",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Plain-English",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "PlainTeX",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PlainTeX",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector",
          "Vector-products"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Pluto",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Pointless",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Pointless",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Pointless",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Pony",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Pony",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Pony",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Pop11",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Metaprogramming"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "PostScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Potion",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Potion",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Potion",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Potion",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-solver"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "PowerBASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Introspection",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "JSON"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "PowerShell",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Flood-fill",
          "Bitmap"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Processing",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Flood-fill"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Processing-Python-mode",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Processing.R",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Prog8",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Truth-table"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Prolog",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Pure",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Pure",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Pure-Data",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "PureBasic",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Purity",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Python",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Python",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Python",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Python",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Python",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Python",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Python",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Python",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Python",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 9,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Python",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Python",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Python",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Python",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Python",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 4,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Python",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Python",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Python",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Python",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Python",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Python",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Python",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Python",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Python",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Python",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Python",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Python",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Python",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Python",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Python",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Python",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Python",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Python",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Python",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Python",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Python",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Python",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Python",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Python",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Python",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Q",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Q",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-angle"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "QB64",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Vector",
          "Statistics-Basic"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "QBasic",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Qi",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "N-queens-problem"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 5,
        "tasks": [
          "Random-Latin-squares",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Quackery",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "QuickBASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Quite-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Quite-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Quite-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Quite-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "R",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "R",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "R",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "R",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "R",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 4,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "R",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "R",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "R",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "R",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "R",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "R",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "R",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "R",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "R",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "R",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "R",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "R",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "R",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "R",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "R",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "R",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "R",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "R",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "R",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "R",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "R",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "R",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "R",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "R",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "RATFOR",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "JSON",
          "Object-serialization",
          "XML-Input"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "REBOL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 6,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "REXX",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "RISC-V-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "RLaB",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays"
        ]
      },
      {
        "language": "RLaB",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "RLaB",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "RLaB",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "RPG",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Racket",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 4,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Raku",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap",
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "RapidQ",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Sudoku"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "XML-Output"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Palindrome-detection",
          "Anagrams"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Metaprogramming"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Rascal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Raven",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "ReScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "ReScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "ReScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ReScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Red",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Red",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Red",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Red",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Red",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Solve-the-no-connection-puzzle"
        ]
      },
      {
        "language": "Red",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Red",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Red",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Red",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Red",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Red",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Red",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "Red",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Red",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Red",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Refal",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Relation",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Host-introspection",
          "Introspection"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Retro",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Rhope",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Rhovas",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ring",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Robotic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Rockstar",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Ruby",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Atomic-updates"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Run-BASIC",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 7,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Rust",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "S-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "S-lang",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Write-float-arrays-to-a-text-file"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded",
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Sudoku"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "SAS",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "SASL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Truth-table"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SETL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Metaprogramming"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Text-processing-2"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Short-circuit-evaluation",
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "SNOBOL4",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "SNUSP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SNUSP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "SPAD",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SPARK",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "SPL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "SQL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "SQL-PL",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "SQL-PL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SQL-PL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "SSEM",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Salmon",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Salmon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Sather",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 7,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 5,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Scala",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "K-means++-clustering"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Knights-tour",
          "N-queens-problem"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Scheme",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Sudoku"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Scilab",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Tic-tac-toe",
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Sed",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Sed",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Sed",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Seed7",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Self",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Self",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Self",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "SenseTalk",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Knights-tour"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "Monte-Carlo-methods",
          "K-means++-clustering"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SequenceL",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Parallel-calculations"
        ]
      },
      {
        "language": "Shale",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Sudoku"
        ]
      },
      {
        "language": "Shale",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Shale",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Mutex"
        ]
      },
      {
        "language": "Shen",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Metaprogramming"
        ]
      },
      {
        "language": "Shen",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Shen",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Shiny",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 7,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Reflection-List-methods"
        ]
      },
      {
        "language": "Sidef",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Pi"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Simula",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Sinclair-ZX81-BASIC",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Sinclair-ZX81-BASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Sinclair-ZX81-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Sinclair-ZX81-BASIC",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "Sinclair-ZX81-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SkookumScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Longest-common-subsequence",
          "Regular-expressions"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Host-introspection",
          "Introspection"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Slate",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Slope",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Slope",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "Slope",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Slope",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 3,
        "tasks": [
          "Currency",
          "Active-object",
          "Atomic-updates"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Metaprogramming"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "meta_learning/introspection",
        "task_count": 3,
        "tasks": [
          "Reflection-List-properties",
          "Introspection",
          "Reflection-Get-source"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Smalltalk",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "SmileBASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "SmileBASIC",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Probabilistic-choice"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "SparForte",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Sparkling",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Sparkling",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Sparkling",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Pi"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Pi"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 5,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-PCG32",
          "Random-numbers"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-angle"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Compiler-lexical-analyzer",
          "Pi"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Flood-fill"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Standard-ML",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "Stata",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Suneido",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "SuperCollider",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "SuperCollider",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Active-object"
        ]
      },
      {
        "language": "SuperCollider",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "SuperCollider",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "SuperCollider",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 3,
        "tasks": [
          "Fast-Fourier-transform",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 4,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Currency"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Word-frequency"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 4,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Splitmix64"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "JSON"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Swift",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Symsyn",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Fast-Fourier-transform"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Sudoku"
        ]
      },
      {
        "language": "SystemVerilog",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "TAV",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "TI-83-BASIC",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Host-introspection",
          "Introspection"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TI-89-BASIC",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "TMG",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string-with-escaping"
        ]
      },
      {
        "language": "TMG",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TMG",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TMG",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "TSE-SAL",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Soundex"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "TUSCRIPT",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Regular-expressions",
          "String-matching"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 4,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "JSON",
          "Object-serialization",
          "XML-Input"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "TXR",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Dijkstras-algorithm",
          "Topological-sort"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Tailspin",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 10,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 3,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 5,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 2,
        "tasks": [
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 4,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Tcl",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Tern",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Terraform",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Tiny-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Toka",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "TorqueScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "TorqueScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "TorqueScript",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "TorqueScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Runtime-evaluation",
          "Runtime-evaluation-In-an-environment"
        ]
      },
      {
        "language": "Transd",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "True-BASIC",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "Turbo-Basic-XL",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Turbo-Basic-XL",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Turing",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Maze-generation"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "TypeScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 6,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 5,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "meta_learning/introspection",
        "task_count": 2,
        "tasks": [
          "Introspection",
          "Host-introspection"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "UNIX-Shell",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Water-collected-between-towers",
          "Maze-generation",
          "Maze-solving"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-solver",
          "Towers-of-Hanoi",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Uiua",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Unicon",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "Unicon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Unicon",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Synchronous-concurrency"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "UnixPipes",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Unlambda",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Ursa",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Execute-a-system-command",
          "Runtime-evaluation"
        ]
      },
      {
        "language": "Ursa",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ursa",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Ursa",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-Continuous",
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Deconvolution-1D",
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Longest-common-subsequence"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Probabilistic-choice",
          "Random-numbers"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Ursala",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Ursalang",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Ursalang",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Ursalang",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Uxntal",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Uxntal",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "V",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "V",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "V",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "V",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 4,
        "tasks": [
          "Fast-Fourier-transform",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "Zebra-puzzle"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "JSON"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "V-(Vlang)",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Fast-Fourier-transform",
          "Filter"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 5,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 3,
        "tasks": [
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Tic-tac-toe"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "VBA",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 1,
        "tasks": [
          "Verify-distribution-uniformity-Naive"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Cumulative-standard-deviation",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Anagrams"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "Tree-traversal"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Probabilistic-choice"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "VBScript",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Output"
        ]
      },
      {
        "language": "VHDL",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "VHDL",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "VHDL",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "VTL-2",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously",
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 3,
        "tasks": [
          "Regular-expressions",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 2,
        "tasks": [
          "Averages-Mean-angle",
          "Averages-Pythagorean-means"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Vala",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 6,
        "tasks": [
          "Bitmap-Histogram",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Regular-expressions"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Vedit-macro-language",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Verbexx",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Verilog",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "Verilog",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Vim-Script",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Vim-Script",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-Input"
        ]
      },
      {
        "language": "Vim-Script",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Vim-Script",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 2,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Visual-Basic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 2,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Short-circuit-evaluation",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 2,
        "tasks": [
          "Synchronous-concurrency",
          "Active-object"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 4,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Vector-products"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Topological-sort"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 2,
        "tasks": [
          "Bitmap",
          "Bitmap-Write-a-PPM-file"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Anagrams"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Visual-Basic-.NET",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Visual-FoxPro",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 2,
        "tasks": [
          "Short-circuit-evaluation",
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Visual-FoxPro",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation"
        ]
      },
      {
        "language": "Visual-FoxPro",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Visual-FoxPro",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Visual-Prolog",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "WDTE",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Wart",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Wart",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap-Bresenhams-line-algorithm"
        ]
      },
      {
        "language": "Wart",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Wart",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Wart",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Wee-Basic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Whitespace",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Hash-from-two-arrays"
        ]
      },
      {
        "language": "Wortel",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Wrapl",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 6,
        "tasks": [
          "15-puzzle-solver",
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 6,
        "tasks": [
          "Deconvolution-2D+",
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "natural_language/parsing",
        "task_count": 5,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Compiler-lexical-analyzer",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 5,
        "tasks": [
          "AVL-tree",
          "K-d-tree",
          "Ukkonen-s-suffix-tree-construction",
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 3,
        "tasks": [
          "Boolean-values",
          "Truth-table",
          "Logical-operations"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "natural_language/text_processing",
        "task_count": 3,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 6,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle",
          "Solve-a-Holy-Knights-tour"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 8,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Pseudo-random-numbers-PCG32",
          "Pseudo-random-numbers-Xorshift-star",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice",
          "Pseudo-random-numbers-Splitmix64",
          "Pseudo-random-numbers-Combined-recursive-generator-MRG32k3a"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "meta_learning/introspection",
        "task_count": 5,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Host-introspection",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 4,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 3,
        "tasks": [
          "Soundex",
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "pattern_recognition/recognition_tasks",
        "task_count": 1,
        "tasks": [
          "Hunt-the-Wumpus"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "perception_motor/image_processing",
        "task_count": 2,
        "tasks": [
          "Image-noise",
          "Image-convolution"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 5,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "XML-DOM-serialization",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Wren",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "X86-64-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "15-puzzle-game"
        ]
      },
      {
        "language": "X86-64-Assembly",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method"
        ]
      },
      {
        "language": "X86-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "X86-Assembly",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "X86-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "X86-Assembly",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Execute-a-system-command"
        ]
      },
      {
        "language": "X86-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "XBS",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "XBS",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Vector-products"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Truth-table"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "XBasic",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "XLISP",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "XLISP",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "XLISP",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "XLISP",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 1,
        "tasks": [
          "Concurrent-computing"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 8,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Flood-fill",
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 2,
        "tasks": [
          "K-means++-clustering",
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 2,
        "tasks": [
          "Maze-generation",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 2,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-1",
          "Text-processing-2"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 4,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Palindrome-detection"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 1,
        "tasks": [
          "Soundex"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-numbers",
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 1,
        "tasks": [
          "Currency"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "Tree-traversal",
          "Tree-from-nesting-levels"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 2,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Filter"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Logical-operations"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "XPL0",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "XPath-2.0",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "XProc",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "XProfan",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "XQuery",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 3,
        "tasks": [
          "XML-Output",
          "JSON",
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "XQuery",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "XQuery",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "XQuery",
        "subcategory": "natural_language/text_processing",
        "task_count": 1,
        "tasks": [
          "Word-frequency"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 2,
        "tasks": [
          "N-queens-problem",
          "Knights-tour"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Logical-operations",
          "Boolean-values"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "XSLT",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Xanadu",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Xojo",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 1,
        "tasks": [
          "Bitmap"
        ]
      },
      {
        "language": "Xojo",
        "subcategory": "natural_language/parsing",
        "task_count": 2,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm"
        ]
      },
      {
        "language": "YAMLScript",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "YAMLScript",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 1,
        "tasks": [
          "AVL-tree"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 3,
        "tasks": [
          "Vector",
          "Averages-Mean-angle",
          "Statistics-Basic"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "Towers-of-Hanoi",
          "Pi"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "Ackermann-function",
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 2,
        "tasks": [
          "Conways-Game-of-Life",
          "Tic-tac-toe"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Anagrams"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Soundex",
          "Anagrams"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 3,
        "tasks": [
          "Bitmap",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 1,
        "tasks": [
          "N-queens-problem"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "natural_language/parsing",
        "task_count": 1,
        "tasks": [
          "Pi"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Apply-a-digital-filter-direct-form-II-transposed-"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 2,
        "tasks": [
          "Pseudo-random-numbers-Middle-square-method",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 2,
        "tasks": [
          "XML-Input",
          "XML-Output"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 1,
        "tasks": [
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Yabasic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Yorick",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Yorick",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Yorick",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "meta_learning/code_generation",
        "task_count": 2,
        "tasks": [
          "Metaprogramming",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 1,
        "tasks": [
          "XML-DOM-serialization"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Host-introspection"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "perception_motor/image_processing",
        "task_count": 1,
        "tasks": [
          "Image-noise"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 1,
        "tasks": [
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "String-matching"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "Z80-Assembly",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "ZED",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ZPL",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 3,
        "tasks": [
          "Arrays",
          "Write-float-arrays-to-a-text-file",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 3,
        "tasks": [
          "Evaluate-binomial-coefficients",
          "Execute-a-system-command",
          "Arithmetic-evaluation"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "Ackermann-function"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Filter"
        ]
      },
      {
        "language": "ZX-Spectrum-Basic",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 1,
        "tasks": [
          "Random-numbers"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 2,
        "tasks": [
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 1,
        "tasks": [
          "Deconvolution-1D"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 3,
        "tasks": [
          "15-puzzle-game",
          "15-puzzle-solver",
          "Towers-of-Hanoi"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 1,
        "tasks": [
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "meta_learning/code_generation",
        "task_count": 1,
        "tasks": [
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "natural_language/parsing",
        "task_count": 3,
        "tasks": [
          "Parsing-RPN-calculator-algorithm",
          "Parsing-Shunting-yard-algorithm",
          "Compiler-lexical-analyzer"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 1,
        "tasks": [
          "Knapsack-problem-0-1"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Solve-a-Holy-Knights-tour",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 1,
        "tasks": [
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 2,
        "tasks": [
          "AKS-test-for-primes",
          "Ackermann-function"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 2,
        "tasks": [
          "Boyer-Moore-string-search",
          "Binary-search"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "AVL-tree",
          "K-d-tree"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "meta_learning/introspection",
        "task_count": 1,
        "tasks": [
          "Introspection"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "natural_language/language_analysis",
        "task_count": 1,
        "tasks": [
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 1,
        "tasks": [
          "Cumulative-standard-deviation"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Zig",
        "subcategory": "perception_motor/rendering",
        "task_count": 1,
        "tasks": [
          "Draw-a-sphere"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "cognitive_architecture/parallelism",
        "task_count": 3,
        "tasks": [
          "Concurrent-computing",
          "Parallel-brute-force",
          "Parallel-calculations"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "meta_learning/runtime_evaluation",
        "task_count": 7,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients",
          "Runtime-evaluation",
          "Short-circuit-evaluation",
          "Arithmetic-evaluation",
          "Runtime-evaluation-In-an-environment",
          "Execute-a-system-command"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "meta_learning/evaluation_functions",
        "task_count": 2,
        "tasks": [
          "Horners-rule-for-polynomial-evaluation",
          "Evaluate-binomial-coefficients"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "planning_problem_solving/optimization_problems",
        "task_count": 3,
        "tasks": [
          "Knapsack-problem-0-1",
          "Knapsack-problem-Continuous",
          "Knapsack-problem-Unbounded"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "knowledge_representation/graph_structures",
        "task_count": 3,
        "tasks": [
          "Graph-colouring",
          "Topological-sort",
          "Dijkstras-algorithm"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 4,
        "tasks": [
          "Write-float-arrays-to-a-text-file",
          "Hash-from-two-arrays",
          "Arrays",
          "Loop-over-multiple-arrays-simultaneously"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "perception_motor/bitmap_operations",
        "task_count": 11,
        "tasks": [
          "Bitmap-B-zier-curves-Cubic",
          "Bitmap-Bresenhams-line-algorithm",
          "Bitmap-B-zier-curves-Quadratic",
          "Bitmap-Histogram",
          "Bitmap-Flood-fill",
          "Bitmap-Read-an-image-through-a-pipe",
          "Bitmap",
          "Bitmap-PPM-conversion-through-a-pipe",
          "Bitmap-Write-a-PPM-file",
          "Bitmap-Midpoint-circle-algorithm",
          "Bitmap-Read-a-PPM-file"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "natural_language/tokenization",
        "task_count": 2,
        "tasks": [
          "Tokenize-a-string-with-escaping",
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "natural_language/parsing",
        "task_count": 4,
        "tasks": [
          "Parsing-Shunting-yard-algorithm",
          "Parsing-RPN-calculator-algorithm",
          "Pi",
          "Parsing-RPN-to-infix-conversion"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "perception_motor/signal_processing",
        "task_count": 5,
        "tasks": [
          "Fast-Fourier-transform",
          "Median-filter",
          "Apply-a-digital-filter-direct-form-II-transposed-",
          "Deconvolution-1D",
          "Filter"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "knowledge_representation/tree_structures",
        "task_count": 2,
        "tasks": [
          "K-d-tree",
          "Tree-traversal"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "cognitive_architecture/synchronization",
        "task_count": 6,
        "tasks": [
          "Mutex",
          "Synchronous-concurrency",
          "Active-object",
          "Atomic-updates",
          "Checkpoint-synchronization",
          "Currency"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 2,
        "tasks": [
          "Boolean-values",
          "Logical-operations"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "perception_motor/rendering",
        "task_count": 2,
        "tasks": [
          "Draw-a-sphere",
          "Ray-casting-algorithm"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "machine_learning/statistical_measures",
        "task_count": 6,
        "tasks": [
          "Vector",
          "Cumulative-standard-deviation",
          "Averages-Mean-angle",
          "Averages-Pythagorean-means",
          "Statistics-Basic",
          "Vector-products"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "planning_problem_solving/path_planning",
        "task_count": 3,
        "tasks": [
          "Maze-generation",
          "Maze-solving",
          "Water-collected-between-towers"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "meta_learning/self_reference",
        "task_count": 1,
        "tasks": [
          "Quine"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "meta_learning/code_generation",
        "task_count": 3,
        "tasks": [
          "Metaprogramming",
          "Pi",
          "Compile-time-calculation"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "machine_learning/statistical_learning",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "uncertainty_reasoning/monte_carlo",
        "task_count": 1,
        "tasks": [
          "Monte-Carlo-methods"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "cognitive_architecture/concurrent_patterns",
        "task_count": 1,
        "tasks": [
          "Dining-philosophers"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "natural_language/text_processing",
        "task_count": 2,
        "tasks": [
          "Text-processing-2",
          "Word-frequency"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "symbolic_reasoning/constraint_solving",
        "task_count": 5,
        "tasks": [
          "Solve-the-no-connection-puzzle",
          "Knights-tour",
          "Sudoku",
          "N-queens-problem",
          "Zebra-puzzle"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "uncertainty_reasoning/probability_basics",
        "task_count": 3,
        "tasks": [
          "Random-Latin-squares",
          "Random-numbers",
          "Probabilistic-choice"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "pattern_recognition/string_pattern_matching",
        "task_count": 5,
        "tasks": [
          "Regular-expressions",
          "Longest-common-subsequence",
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance",
          "String-matching"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "uncertainty_reasoning/statistical_tests",
        "task_count": 2,
        "tasks": [
          "Verify-distribution-uniformity-Naive",
          "Verify-distribution-uniformity-Chi-squared-test"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "planning_problem_solving/puzzle_solving",
        "task_count": 4,
        "tasks": [
          "Towers-of-Hanoi",
          "Pi",
          "Solve-a-Hopido-puzzle",
          "Solve-a-Numbrix-puzzle"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "meta_learning/introspection",
        "task_count": 4,
        "tasks": [
          "Introspection",
          "Reflection-Get-source",
          "Reflection-List-methods",
          "Reflection-List-properties"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "planning_problem_solving/game_playing",
        "task_count": 1,
        "tasks": [
          "Conways-Game-of-Life"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "symbolic_reasoning/formal_computation",
        "task_count": 1,
        "tasks": [
          "Four-bit-adder"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "symbolic_reasoning/theorem_proving",
        "task_count": 1,
        "tasks": [
          "AKS-test-for-primes"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 3,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams",
          "Palindrome-detection"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "natural_language/phonetic_matching",
        "task_count": 2,
        "tasks": [
          "Anagrams-Deranged-anagrams",
          "Anagrams"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "natural_language/language_analysis",
        "task_count": 2,
        "tasks": [
          "Levenshtein-distance-Alignment",
          "Levenshtein-distance"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "knowledge_representation/serialization",
        "task_count": 4,
        "tasks": [
          "Object-serialization",
          "XML-Input",
          "JSON",
          "XML-Output"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "pattern_recognition/search_algorithms",
        "task_count": 1,
        "tasks": [
          "Binary-search"
        ]
      },
      {
        "language": "Zkl",
        "subcategory": "perception_motor/time_processing",
        "task_count": 1,
        "tasks": [
          "Averages-Mean-time-of-day"
        ]
      },
      {
        "language": "Zoea",
        "subcategory": "pattern_recognition/lexical_patterns",
        "task_count": 1,
        "tasks": [
          "Palindrome-detection"
        ]
      },
      {
        "language": "Zoea",
        "subcategory": "natural_language/tokenization",
        "task_count": 1,
        "tasks": [
          "Tokenize-a-string"
        ]
      },
      {
        "language": "Zonnon",
        "subcategory": "knowledge_representation/associative_structures",
        "task_count": 1,
        "tasks": [
          "Arrays"
        ]
      },
      {
        "language": "Zonnon",
        "subcategory": "symbolic_reasoning/logic_fundamentals",
        "task_count": 1,
        "tasks": [
          "Boolean-values"
        ]
      }
    ],
    "language_to_paradigm": [
      {
        "language": "Assembly",
        "paradigm": "imperative"
      },
      {
        "language": "BASIC",
        "paradigm": "imperative"
      },
      {
        "language": "C",
        "paradigm": "imperative"
      },
      {
        "language": "C",
        "paradigm": "system"
      },
      {
        "language": "C++",
        "paradigm": "object_oriented"
      },
      {
        "language": "C++",
        "paradigm": "system"
      },
      {
        "language": "C-sharp",
        "paradigm": "object_oriented"
      },
      {
        "language": "D",
        "paradigm": "system"
      },
      {
        "language": "Datalog",
        "paradigm": "logic"
      },
      {
        "language": "Elixir",
        "paradigm": "functional"
      },
      {
        "language": "Elixir",
        "paradigm": "concurrent"
      },
      {
        "language": "Erlang",
        "paradigm": "functional"
      },
      {
        "language": "Erlang",
        "paradigm": "concurrent"
      },
      {
        "language": "F-Sharp",
        "paradigm": "functional"
      },
      {
        "language": "Fortran",
        "paradigm": "imperative"
      },
      {
        "language": "Fortran",
        "paradigm": "scientific"
      },
      {
        "language": "Go",
        "paradigm": "concurrent"
      },
      {
        "language": "Go-",
        "paradigm": "concurrent"
      },
      {
        "language": "Haskell",
        "paradigm": "functional"
      },
      {
        "language": "Java",
        "paradigm": "object_oriented"
      },
      {
        "language": "JavaScript",
        "paradigm": "scripting"
      },
      {
        "language": "Julia",
        "paradigm": "scientific"
      },
      {
        "language": "Julia",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "Kotlin",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "Lisp",
        "paradigm": "functional"
      },
      {
        "language": "Lua",
        "paradigm": "scripting"
      },
      {
        "language": "MATLAB",
        "paradigm": "scientific"
      },
      {
        "language": "Mercury",
        "paradigm": "logic"
      },
      {
        "language": "Nim",
        "paradigm": "system"
      },
      {
        "language": "OCaml",
        "paradigm": "functional"
      },
      {
        "language": "Octave",
        "paradigm": "scientific"
      },
      {
        "language": "Pascal",
        "paradigm": "imperative"
      },
      {
        "language": "Perl",
        "paradigm": "scripting"
      },
      {
        "language": "Prolog",
        "paradigm": "logic"
      },
      {
        "language": "Python",
        "paradigm": "object_oriented"
      },
      {
        "language": "Python",
        "paradigm": "scripting"
      },
      {
        "language": "Python",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "R",
        "paradigm": "scientific"
      },
      {
        "language": "Ruby",
        "paradigm": "object_oriented"
      },
      {
        "language": "Ruby",
        "paradigm": "scripting"
      },
      {
        "language": "Rust",
        "paradigm": "concurrent"
      },
      {
        "language": "Rust",
        "paradigm": "system"
      },
      {
        "language": "Rust",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "Scala",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "Scheme",
        "paradigm": "functional"
      },
      {
        "language": "Smalltalk",
        "paradigm": "object_oriented"
      },
      {
        "language": "Swift",
        "paradigm": "multi_paradigm"
      },
      {
        "language": "Tcl",
        "paradigm": "scripting"
      }
    ],
    "subcategory_performance": {
      "cognitive_architecture/concurrent_patterns": {
        "top_languages": [
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "AutoHotkey",
            "task_count": 1
          },
          {
            "language": "BBC-BASIC",
            "task_count": 1
          },
          {
            "language": "C",
            "task_count": 1
          },
          {
            "language": "C++",
            "task_count": 1
          },
          {
            "language": "C-sharp",
            "task_count": 1
          },
          {
            "language": "Clojure",
            "task_count": 1
          },
          {
            "language": "Common-Lisp",
            "task_count": 1
          },
          {
            "language": "D",
            "task_count": 1
          },
          {
            "language": "Delphi",
            "task_count": 1
          }
        ],
        "total_implementations": 52
      },
      "cognitive_architecture/message_passing": {
        "top_languages": [],
        "total_implementations": 0
      },
      "cognitive_architecture/parallelism": {
        "top_languages": [
          {
            "language": "Ada",
            "task_count": 3
          },
          {
            "language": "C",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          },
          {
            "language": "Clojure",
            "task_count": 3
          },
          {
            "language": "Common-Lisp",
            "task_count": 3
          },
          {
            "language": "D",
            "task_count": 3
          },
          {
            "language": "Delphi",
            "task_count": 3
          },
          {
            "language": "Erlang",
            "task_count": 3
          },
          {
            "language": "F-Sharp",
            "task_count": 3
          }
        ],
        "total_implementations": 90
      },
      "cognitive_architecture/synchronization": {
        "top_languages": [
          {
            "language": "Ada",
            "task_count": 6
          },
          {
            "language": "C",
            "task_count": 6
          },
          {
            "language": "FreeBASIC",
            "task_count": 6
          },
          {
            "language": "Go",
            "task_count": 6
          },
          {
            "language": "Haskell",
            "task_count": 6
          },
          {
            "language": "Java",
            "task_count": 6
          },
          {
            "language": "Julia",
            "task_count": 6
          },
          {
            "language": "Nim",
            "task_count": 6
          },
          {
            "language": "Perl",
            "task_count": 6
          },
          {
            "language": "Phix",
            "task_count": 6
          }
        ],
        "total_implementations": 98
      },
      "knowledge_representation/associative_structures": {
        "top_languages": [
          {
            "language": "AWK",
            "task_count": 4
          },
          {
            "language": "Ada",
            "task_count": 4
          },
          {
            "language": "BBC-BASIC",
            "task_count": 4
          },
          {
            "language": "C",
            "task_count": 4
          },
          {
            "language": "C++",
            "task_count": 4
          },
          {
            "language": "C-sharp",
            "task_count": 4
          },
          {
            "language": "Common-Lisp",
            "task_count": 4
          },
          {
            "language": "D",
            "task_count": 4
          },
          {
            "language": "Delphi",
            "task_count": 4
          },
          {
            "language": "Elixir",
            "task_count": 4
          }
        ],
        "total_implementations": 293
      },
      "knowledge_representation/graph_structures": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          },
          {
            "language": "FreeBASIC",
            "task_count": 3
          },
          {
            "language": "Go",
            "task_count": 3
          },
          {
            "language": "Haskell",
            "task_count": 3
          },
          {
            "language": "J",
            "task_count": 3
          },
          {
            "language": "Java",
            "task_count": 3
          },
          {
            "language": "JavaScript",
            "task_count": 3
          },
          {
            "language": "Jq",
            "task_count": 3
          }
        ],
        "total_implementations": 90
      },
      "knowledge_representation/serialization": {
        "top_languages": [
          {
            "language": "Ada",
            "task_count": 5
          },
          {
            "language": "C++",
            "task_count": 5
          },
          {
            "language": "C-sharp",
            "task_count": 5
          },
          {
            "language": "Common-Lisp",
            "task_count": 5
          },
          {
            "language": "D",
            "task_count": 5
          },
          {
            "language": "Factor",
            "task_count": 5
          },
          {
            "language": "FreeBASIC",
            "task_count": 5
          },
          {
            "language": "Go",
            "task_count": 5
          },
          {
            "language": "Groovy",
            "task_count": 5
          },
          {
            "language": "Haskell",
            "task_count": 5
          }
        ],
        "total_implementations": 132
      },
      "knowledge_representation/tree_structures": {
        "top_languages": [
          {
            "language": "C++",
            "task_count": 5
          },
          {
            "language": "FreeBASIC",
            "task_count": 5
          },
          {
            "language": "Go",
            "task_count": 5
          },
          {
            "language": "Java",
            "task_count": 5
          },
          {
            "language": "Julia",
            "task_count": 5
          },
          {
            "language": "Nim",
            "task_count": 5
          },
          {
            "language": "Phix",
            "task_count": 5
          },
          {
            "language": "Wren",
            "task_count": 5
          },
          {
            "language": "Haskell",
            "task_count": 4
          },
          {
            "language": "J",
            "task_count": 4
          }
        ],
        "total_implementations": 117
      },
      "machine_learning/neural_networks": {
        "top_languages": [],
        "total_implementations": 0
      },
      "machine_learning/optimization": {
        "top_languages": [],
        "total_implementations": 0
      },
      "machine_learning/statistical_learning": {
        "top_languages": [
          {
            "language": "C",
            "task_count": 2
          },
          {
            "language": "Crystal",
            "task_count": 2
          },
          {
            "language": "D",
            "task_count": 2
          },
          {
            "language": "Delphi",
            "task_count": 2
          },
          {
            "language": "Euler",
            "task_count": 2
          },
          {
            "language": "Fortran",
            "task_count": 2
          },
          {
            "language": "Go",
            "task_count": 2
          },
          {
            "language": "Haskell",
            "task_count": 2
          },
          {
            "language": "J",
            "task_count": 2
          },
          {
            "language": "Java",
            "task_count": 2
          }
        ],
        "total_implementations": 95
      },
      "machine_learning/statistical_measures": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 6
          },
          {
            "language": "ALGOL-68",
            "task_count": 6
          },
          {
            "language": "Ada",
            "task_count": 6
          },
          {
            "language": "C",
            "task_count": 6
          },
          {
            "language": "C++",
            "task_count": 6
          },
          {
            "language": "C-sharp",
            "task_count": 6
          },
          {
            "language": "D",
            "task_count": 6
          },
          {
            "language": "EasyLang",
            "task_count": 6
          },
          {
            "language": "Factor",
            "task_count": 6
          },
          {
            "language": "Fortran",
            "task_count": 6
          }
        ],
        "total_implementations": 175
      },
      "meta_learning/code_generation": {
        "top_languages": [
          {
            "language": "Arturo",
            "task_count": 3
          },
          {
            "language": "C",
            "task_count": 3
          },
          {
            "language": "Common-Lisp",
            "task_count": 3
          },
          {
            "language": "D",
            "task_count": 3
          },
          {
            "language": "FreeBASIC",
            "task_count": 3
          },
          {
            "language": "Go",
            "task_count": 3
          },
          {
            "language": "Julia",
            "task_count": 3
          },
          {
            "language": "Kotlin",
            "task_count": 3
          },
          {
            "language": "Lua",
            "task_count": 3
          },
          {
            "language": "Mathematica",
            "task_count": 3
          }
        ],
        "total_implementations": 124
      },
      "meta_learning/evaluation_functions": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "360-Assembly",
            "task_count": 2
          },
          {
            "language": "ACL2",
            "task_count": 2
          },
          {
            "language": "ALGOL-68",
            "task_count": 2
          },
          {
            "language": "ALGOL-W",
            "task_count": 2
          },
          {
            "language": "APL",
            "task_count": 2
          },
          {
            "language": "AWK",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "Arturo",
            "task_count": 2
          },
          {
            "language": "AutoHotkey",
            "task_count": 2
          }
        ],
        "total_implementations": 159
      },
      "meta_learning/introspection": {
        "top_languages": [
          {
            "language": "C-sharp",
            "task_count": 5
          },
          {
            "language": "Factor",
            "task_count": 5
          },
          {
            "language": "FreeBASIC",
            "task_count": 5
          },
          {
            "language": "Go",
            "task_count": 5
          },
          {
            "language": "Java",
            "task_count": 5
          },
          {
            "language": "Julia",
            "task_count": 5
          },
          {
            "language": "Kotlin",
            "task_count": 5
          },
          {
            "language": "Lua",
            "task_count": 5
          },
          {
            "language": "Nim",
            "task_count": 5
          },
          {
            "language": "Perl",
            "task_count": 5
          }
        ],
        "total_implementations": 116
      },
      "meta_learning/runtime_evaluation": {
        "top_languages": [
          {
            "language": "ALGOL-68",
            "task_count": 7
          },
          {
            "language": "AutoHotkey",
            "task_count": 7
          },
          {
            "language": "BBC-BASIC",
            "task_count": 7
          },
          {
            "language": "Common-Lisp",
            "task_count": 7
          },
          {
            "language": "FreeBASIC",
            "task_count": 7
          },
          {
            "language": "Groovy",
            "task_count": 7
          },
          {
            "language": "J",
            "task_count": 7
          },
          {
            "language": "Java",
            "task_count": 7
          },
          {
            "language": "JavaScript",
            "task_count": 7
          },
          {
            "language": "Julia",
            "task_count": 7
          }
        ],
        "total_implementations": 231
      },
      "meta_learning/self_reference": {
        "top_languages": [
          {
            "language": "8080-Assembly",
            "task_count": 1
          },
          {
            "language": "ABAP",
            "task_count": 1
          },
          {
            "language": "ACL2",
            "task_count": 1
          },
          {
            "language": "ALGOL-68",
            "task_count": 1
          },
          {
            "language": "APL",
            "task_count": 1
          },
          {
            "language": "AWK",
            "task_count": 1
          },
          {
            "language": "Acornsoft-Lisp",
            "task_count": 1
          },
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "Aime",
            "task_count": 1
          },
          {
            "language": "Applesoft-BASIC",
            "task_count": 1
          }
        ],
        "total_implementations": 174
      },
      "natural_language/language_analysis": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "Arturo",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          },
          {
            "language": "C++",
            "task_count": 2
          },
          {
            "language": "C-sharp",
            "task_count": 2
          },
          {
            "language": "D",
            "task_count": 2
          },
          {
            "language": "EasyLang",
            "task_count": 2
          },
          {
            "language": "FreeBASIC",
            "task_count": 2
          },
          {
            "language": "Go",
            "task_count": 2
          }
        ],
        "total_implementations": 136
      },
      "natural_language/parsing": {
        "top_languages": [
          {
            "language": "ALGOL-68",
            "task_count": 5
          },
          {
            "language": "C",
            "task_count": 5
          },
          {
            "language": "C++",
            "task_count": 5
          },
          {
            "language": "C-sharp",
            "task_count": 5
          },
          {
            "language": "Common-Lisp",
            "task_count": 5
          },
          {
            "language": "FreeBASIC",
            "task_count": 5
          },
          {
            "language": "Go",
            "task_count": 5
          },
          {
            "language": "Haskell",
            "task_count": 5
          },
          {
            "language": "Icon",
            "task_count": 5
          },
          {
            "language": "J",
            "task_count": 5
          }
        ],
        "total_implementations": 132
      },
      "natural_language/phonetic_matching": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 3
          },
          {
            "language": "ALGOL-68",
            "task_count": 3
          },
          {
            "language": "AWK",
            "task_count": 3
          },
          {
            "language": "Ada",
            "task_count": 3
          },
          {
            "language": "Arturo",
            "task_count": 3
          },
          {
            "language": "AutoHotkey",
            "task_count": 3
          },
          {
            "language": "BBC-BASIC",
            "task_count": 3
          },
          {
            "language": "C",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          }
        ],
        "total_implementations": 149
      },
      "natural_language/text_generation": {
        "top_languages": [],
        "total_implementations": 0
      },
      "natural_language/text_processing": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 3
          },
          {
            "language": "ALGOL-68",
            "task_count": 3
          },
          {
            "language": "AWK",
            "task_count": 3
          },
          {
            "language": "Ada",
            "task_count": 3
          },
          {
            "language": "AutoHotkey",
            "task_count": 3
          },
          {
            "language": "C",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "COBOL",
            "task_count": 3
          },
          {
            "language": "Clojure",
            "task_count": 3
          },
          {
            "language": "D",
            "task_count": 3
          }
        ],
        "total_implementations": 98
      },
      "natural_language/tokenization": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "8080-Assembly",
            "task_count": 2
          },
          {
            "language": "ALGOL-68",
            "task_count": 2
          },
          {
            "language": "Action-",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "AppleScript",
            "task_count": 2
          },
          {
            "language": "Arturo",
            "task_count": 2
          },
          {
            "language": "AutoHotkey",
            "task_count": 2
          },
          {
            "language": "BBC-BASIC",
            "task_count": 2
          },
          {
            "language": "BQN",
            "task_count": 2
          }
        ],
        "total_implementations": 194
      },
      "pattern_recognition/lexical_patterns": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 4
          },
          {
            "language": "ALGOL-68",
            "task_count": 4
          },
          {
            "language": "AWK",
            "task_count": 4
          },
          {
            "language": "Ada",
            "task_count": 4
          },
          {
            "language": "Arturo",
            "task_count": 4
          },
          {
            "language": "AutoHotkey",
            "task_count": 4
          },
          {
            "language": "BBC-BASIC",
            "task_count": 4
          },
          {
            "language": "C",
            "task_count": 4
          },
          {
            "language": "C++",
            "task_count": 4
          },
          {
            "language": "C-sharp",
            "task_count": 4
          }
        ],
        "total_implementations": 218
      },
      "pattern_recognition/recognition_tasks": {
        "top_languages": [
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "BASIC",
            "task_count": 1
          },
          {
            "language": "C",
            "task_count": 1
          },
          {
            "language": "C++",
            "task_count": 1
          },
          {
            "language": "Common-Lisp",
            "task_count": 1
          },
          {
            "language": "EasyLang",
            "task_count": 1
          },
          {
            "language": "Fortran",
            "task_count": 1
          },
          {
            "language": "FreeBASIC",
            "task_count": 1
          },
          {
            "language": "FutureBasic",
            "task_count": 1
          },
          {
            "language": "Go",
            "task_count": 1
          }
        ],
        "total_implementations": 28
      },
      "pattern_recognition/search_algorithms": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "C++",
            "task_count": 2
          },
          {
            "language": "C-sharp",
            "task_count": 2
          },
          {
            "language": "EasyLang",
            "task_count": 2
          },
          {
            "language": "Emacs-Lisp",
            "task_count": 2
          },
          {
            "language": "Fortran",
            "task_count": 2
          },
          {
            "language": "FreeBASIC",
            "task_count": 2
          },
          {
            "language": "FutureBasic",
            "task_count": 2
          },
          {
            "language": "Go",
            "task_count": 2
          }
        ],
        "total_implementations": 151
      },
      "pattern_recognition/string_pattern_matching": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 5
          },
          {
            "language": "Ada",
            "task_count": 5
          },
          {
            "language": "Arturo",
            "task_count": 5
          },
          {
            "language": "C",
            "task_count": 5
          },
          {
            "language": "C++",
            "task_count": 5
          },
          {
            "language": "C-sharp",
            "task_count": 5
          },
          {
            "language": "D",
            "task_count": 5
          },
          {
            "language": "FreeBASIC",
            "task_count": 5
          },
          {
            "language": "Go",
            "task_count": 5
          },
          {
            "language": "Haskell",
            "task_count": 5
          }
        ],
        "total_implementations": 213
      },
      "perception_motor/bitmap_operations": {
        "top_languages": [
          {
            "language": "C",
            "task_count": 11
          },
          {
            "language": "FreeBASIC",
            "task_count": 11
          },
          {
            "language": "Go",
            "task_count": 11
          },
          {
            "language": "Mathematica",
            "task_count": 11
          },
          {
            "language": "Phix",
            "task_count": 11
          },
          {
            "language": "PicoLisp",
            "task_count": 11
          },
          {
            "language": "Racket",
            "task_count": 11
          },
          {
            "language": "Raku",
            "task_count": 11
          },
          {
            "language": "Wren",
            "task_count": 11
          },
          {
            "language": "Zkl",
            "task_count": 11
          }
        ],
        "total_implementations": 119
      },
      "perception_motor/image_processing": {
        "top_languages": [
          {
            "language": "Action-",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "BBC-BASIC",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          },
          {
            "language": "Common-Lisp",
            "task_count": 2
          },
          {
            "language": "D",
            "task_count": 2
          },
          {
            "language": "FreeBASIC",
            "task_count": 2
          },
          {
            "language": "Go",
            "task_count": 2
          },
          {
            "language": "J",
            "task_count": 2
          },
          {
            "language": "Java",
            "task_count": 2
          }
        ],
        "total_implementations": 55
      },
      "perception_motor/rendering": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "AutoHotkey",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          },
          {
            "language": "C++",
            "task_count": 2
          },
          {
            "language": "C-sharp",
            "task_count": 2
          },
          {
            "language": "Common-Lisp",
            "task_count": 2
          },
          {
            "language": "D",
            "task_count": 2
          },
          {
            "language": "Factor",
            "task_count": 2
          },
          {
            "language": "FreeBASIC",
            "task_count": 2
          }
        ],
        "total_implementations": 92
      },
      "perception_motor/signal_processing": {
        "top_languages": [
          {
            "language": "C",
            "task_count": 6
          },
          {
            "language": "D",
            "task_count": 6
          },
          {
            "language": "FreeBASIC",
            "task_count": 6
          },
          {
            "language": "Go",
            "task_count": 6
          },
          {
            "language": "J",
            "task_count": 6
          },
          {
            "language": "Java",
            "task_count": 6
          },
          {
            "language": "Julia",
            "task_count": 6
          },
          {
            "language": "Mathematica",
            "task_count": 6
          },
          {
            "language": "Nim",
            "task_count": 6
          },
          {
            "language": "Perl",
            "task_count": 6
          }
        ],
        "total_implementations": 187
      },
      "perception_motor/time_processing": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 1
          },
          {
            "language": "ALGOL-68",
            "task_count": 1
          },
          {
            "language": "AWK",
            "task_count": 1
          },
          {
            "language": "Action-",
            "task_count": 1
          },
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "AutoHotkey",
            "task_count": 1
          },
          {
            "language": "BBC-BASIC",
            "task_count": 1
          },
          {
            "language": "Ballerina",
            "task_count": 1
          },
          {
            "language": "C",
            "task_count": 1
          },
          {
            "language": "C++",
            "task_count": 1
          }
        ],
        "total_implementations": 70
      },
      "planning_problem_solving/game_playing": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "APL",
            "task_count": 2
          },
          {
            "language": "AWK",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "AppleScript",
            "task_count": 2
          },
          {
            "language": "AutoHotkey",
            "task_count": 2
          },
          {
            "language": "BASIC256",
            "task_count": 2
          },
          {
            "language": "Batch-File",
            "task_count": 2
          },
          {
            "language": "Befunge",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          }
        ],
        "total_implementations": 160
      },
      "planning_problem_solving/optimization_problems": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 3
          },
          {
            "language": "Ada",
            "task_count": 3
          },
          {
            "language": "Bracmat",
            "task_count": 3
          },
          {
            "language": "C",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          },
          {
            "language": "Clojure",
            "task_count": 3
          },
          {
            "language": "Common-Lisp",
            "task_count": 3
          },
          {
            "language": "D",
            "task_count": 3
          },
          {
            "language": "EasyLang",
            "task_count": 3
          }
        ],
        "total_implementations": 102
      },
      "planning_problem_solving/path_planning": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 3
          },
          {
            "language": "Action-",
            "task_count": 3
          },
          {
            "language": "Ada",
            "task_count": 3
          },
          {
            "language": "AutoHotkey",
            "task_count": 3
          },
          {
            "language": "C++",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          },
          {
            "language": "Clojure",
            "task_count": 3
          },
          {
            "language": "D",
            "task_count": 3
          },
          {
            "language": "Delphi",
            "task_count": 3
          },
          {
            "language": "EasyLang",
            "task_count": 3
          }
        ],
        "total_implementations": 100
      },
      "planning_problem_solving/puzzle_solving": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 6
          },
          {
            "language": "C++",
            "task_count": 6
          },
          {
            "language": "C-sharp",
            "task_count": 6
          },
          {
            "language": "FreeBASIC",
            "task_count": 6
          },
          {
            "language": "Go",
            "task_count": 6
          },
          {
            "language": "Java",
            "task_count": 6
          },
          {
            "language": "JavaScript",
            "task_count": 6
          },
          {
            "language": "Julia",
            "task_count": 6
          },
          {
            "language": "Mathematica",
            "task_count": 6
          },
          {
            "language": "Nim",
            "task_count": 6
          }
        ],
        "total_implementations": 231
      },
      "planning_problem_solving/search_strategies": {
        "top_languages": [],
        "total_implementations": 0
      },
      "symbolic_reasoning/constraint_solving": {
        "top_languages": [
          {
            "language": "ALGOL-68",
            "task_count": 6
          },
          {
            "language": "Ada",
            "task_count": 6
          },
          {
            "language": "C++",
            "task_count": 6
          },
          {
            "language": "C-sharp",
            "task_count": 6
          },
          {
            "language": "D",
            "task_count": 6
          },
          {
            "language": "Elixir",
            "task_count": 6
          },
          {
            "language": "FreeBASIC",
            "task_count": 6
          },
          {
            "language": "Go",
            "task_count": 6
          },
          {
            "language": "Java",
            "task_count": 6
          },
          {
            "language": "JavaScript",
            "task_count": 6
          }
        ],
        "total_implementations": 159
      },
      "symbolic_reasoning/formal_computation": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 1
          },
          {
            "language": "APL",
            "task_count": 1
          },
          {
            "language": "Action-",
            "task_count": 1
          },
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "Applesoft-BASIC",
            "task_count": 1
          },
          {
            "language": "Arturo",
            "task_count": 1
          },
          {
            "language": "AutoHotkey",
            "task_count": 1
          },
          {
            "language": "AutoIt",
            "task_count": 1
          },
          {
            "language": "BBC-BASIC",
            "task_count": 1
          },
          {
            "language": "Ballerina",
            "task_count": 1
          }
        ],
        "total_implementations": 76
      },
      "symbolic_reasoning/logic_fundamentals": {
        "top_languages": [
          {
            "language": "ALGOL-68",
            "task_count": 3
          },
          {
            "language": "APL",
            "task_count": 3
          },
          {
            "language": "C-sharp",
            "task_count": 3
          },
          {
            "language": "FreeBASIC",
            "task_count": 3
          },
          {
            "language": "Go",
            "task_count": 3
          },
          {
            "language": "Haskell",
            "task_count": 3
          },
          {
            "language": "Java",
            "task_count": 3
          },
          {
            "language": "Julia",
            "task_count": 3
          },
          {
            "language": "M2000-Interpreter",
            "task_count": 3
          },
          {
            "language": "Maxima",
            "task_count": 3
          }
        ],
        "total_implementations": 239
      },
      "symbolic_reasoning/theorem_proving": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "8th",
            "task_count": 2
          },
          {
            "language": "AArch64-Assembly",
            "task_count": 2
          },
          {
            "language": "ALGOL-68",
            "task_count": 2
          },
          {
            "language": "ARM-Assembly",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "AutoHotkey",
            "task_count": 2
          },
          {
            "language": "Ballerina",
            "task_count": 2
          },
          {
            "language": "Bracmat",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          }
        ],
        "total_implementations": 257
      },
      "uncertainty_reasoning/distributions": {
        "top_languages": [],
        "total_implementations": 0
      },
      "uncertainty_reasoning/monte_carlo": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 1
          },
          {
            "language": "360-Assembly",
            "task_count": 1
          },
          {
            "language": "ALGOL-68",
            "task_count": 1
          },
          {
            "language": "APL",
            "task_count": 1
          },
          {
            "language": "AWK",
            "task_count": 1
          },
          {
            "language": "Action-",
            "task_count": 1
          },
          {
            "language": "Ada",
            "task_count": 1
          },
          {
            "language": "Arturo",
            "task_count": 1
          },
          {
            "language": "AutoHotkey",
            "task_count": 1
          },
          {
            "language": "BASIC",
            "task_count": 1
          }
        ],
        "total_implementations": 93
      },
      "uncertainty_reasoning/probability_basics": {
        "top_languages": [
          {
            "language": "C",
            "task_count": 8
          },
          {
            "language": "C++",
            "task_count": 8
          },
          {
            "language": "Factor",
            "task_count": 8
          },
          {
            "language": "FreeBASIC",
            "task_count": 8
          },
          {
            "language": "Go",
            "task_count": 8
          },
          {
            "language": "Haskell",
            "task_count": 8
          },
          {
            "language": "Java",
            "task_count": 8
          },
          {
            "language": "Jq",
            "task_count": 8
          },
          {
            "language": "Julia",
            "task_count": 8
          },
          {
            "language": "Nim",
            "task_count": 8
          }
        ],
        "total_implementations": 150
      },
      "uncertainty_reasoning/statistical_tests": {
        "top_languages": [
          {
            "language": "11l",
            "task_count": 2
          },
          {
            "language": "Ada",
            "task_count": 2
          },
          {
            "language": "C",
            "task_count": 2
          },
          {
            "language": "C++",
            "task_count": 2
          },
          {
            "language": "C-sharp",
            "task_count": 2
          },
          {
            "language": "D",
            "task_count": 2
          },
          {
            "language": "Elixir",
            "task_count": 2
          },
          {
            "language": "Fortran",
            "task_count": 2
          },
          {
            "language": "FreeBASIC",
            "task_count": 2
          },
          {
            "language": "Go",
            "task_count": 2
          }
        ],
        "total_implementations": 55
      }
    }
  },
  "statistics": {
    "total_languages": 970,
    "total_subcategories": 45,
    "total_paradigms": 9,
    "total_edges": 5458
  }
}